/*
  generated by https://github.com/uladkasach/sql-schema-generator @v0.17.1
*/
CREATE FUNCTION `upsert_suggestion`(
  in_suggestion_source enum('TUGETHER_CURATOR','TUGETHER_AFFILIATE'),
  in_external_id varchar(255),
  in_suggested_idea_id bigint(20),
  in_status enum('PENDING','REVIEWED'),
  in_result enum('CURATED_NEW_IDEA','FOUND_EQUIVALENT_IDEA','REJECTED'),
  in_resultant_curated_idea_id bigint(20)
) RETURNS bigint(20)
BEGIN
  -- declarations
  DECLARE v_static_id BIGINT;
  DECLARE v_created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6); -- define a common created_at timestamp to use
  DECLARE v_matching_version_id BIGINT;
  DECLARE v_effective_at DATETIME(6) DEFAULT v_created_at; -- define the effective_at to equal created_at by default (i.e., effective _now_)
  DECLARE v_current_version_id_recorded_in_pointer_table BIGINT;
  DECLARE v_effective_at_of_current_version_recorded_in_pointer_table DATETIME(6);

  -- find or create the static entity
  SET v_static_id = (
    SELECT id
    FROM suggestion
    WHERE 1=1
      AND (suggestion_source = BINARY in_suggestion_source)
      AND (external_id = BINARY in_external_id)
  );
  IF (v_static_id IS NULL) THEN -- if entity could not be found originally, create the static entity
    INSERT INTO suggestion
      (uuid, created_at, suggestion_source, external_id, suggested_idea_id, resultant_curated_idea_id)
      VALUES
      (uuid(), v_created_at, in_suggestion_source, in_external_id, in_suggested_idea_id, in_resultant_curated_idea_id);
    SET v_static_id = (
      SELECT last_insert_id()
    );
  END IF;

  -- insert new version to ensure that latest dynamic data is effective, if dynamic data has changed
  SET v_matching_version_id = ( -- see if latest version already has this data
    SELECT id
    FROM suggestion_version
    WHERE 1=1
      AND suggestion_id = v_static_id -- for this entity
      AND effective_at = ( -- and is the version effective at the time of "v_effective_at"
        SELECT MAX(effective_at)
        FROM suggestion_version ssv
        WHERE ssv.suggestion_id = v_static_id
          AND effective_at <= v_effective_at
      )
      AND (status = BINARY in_status)
      AND (result = BINARY in_result OR (result IS null AND in_result IS null))
  );
  IF (v_matching_version_id IS NULL) THEN -- if the latest version does not match, insert a new version
    INSERT INTO suggestion_version
      (suggestion_id, created_at, effective_at, status, result)
      VALUES
      (v_static_id, v_created_at, v_effective_at, in_status, in_result);
    SET v_matching_version_id = (
      SELECT last_insert_id()
    );
  END IF;

  -- update the current version pointer table, if it is not already up to date
  SET v_current_version_id_recorded_in_pointer_table = ( -- get the version recorded as current for the entity, if any
    SELECT suggestion_version_id
    FROM suggestion_cvp
    WHERE 1=1
      AND suggestion_id = v_static_id -- for this entity
  );
  IF (v_current_version_id_recorded_in_pointer_table IS null) THEN -- if its null, then just insert it, since it isn't already defined
    INSERT INTO suggestion_cvp
      (updated_at, suggestion_id, suggestion_version_id)
      VALUES
      (v_created_at, v_static_id, v_matching_version_id);
    SET v_current_version_id_recorded_in_pointer_table = v_matching_version_id; -- and record that the current version recorded is now the real current version
  END IF;
  IF (v_current_version_id_recorded_in_pointer_table <> v_matching_version_id) THEN -- if they are not exactly equal, try to update the current version recorded in the pointer table
    SET v_effective_at_of_current_version_recorded_in_pointer_table = ( -- grab the effective_at value of the recorded current version
      SELECT effective_at
      FROM suggestion_version
      WHERE id = v_current_version_id_recorded_in_pointer_table
    );
    IF (v_effective_at_of_current_version_recorded_in_pointer_table < v_effective_at) THEN -- update cached current version only if the version we just inserted is "newer" than the currently cached version
      UPDATE suggestion_cvp
      SET
        suggestion_version_id = v_matching_version_id,
        updated_at = v_created_at
      WHERE
      suggestion_id = v_static_id;
    END IF;
  END IF;

  -- return the static entity id
  return v_static_id;
END

/*
  generated by https://github.com/uladkasach/sql-schema-generator @v0.18.3
*/
CREATE OR REPLACE FUNCTION upsert_job(
  in_uuid uuid,
  in_title varchar,
  in_status varchar,
  in_description varchar,
  in_location_id bigint,
  in_photo_ids bigint[]
)
RETURNS bigint
LANGUAGE plpgsql
AS $$
  DECLARE
    v_static_id bigint;
    v_created_at timestamptz := now(); -- define a common created_at timestamp to use
    v_matching_version_id bigint;
    v_effective_at timestamptz := v_created_at; -- i.e., effective "now"
    v_current_version_id_recorded_in_pointer_table bigint;
    v_effective_at_of_current_version_recorded_in_pointer_table timestamptz;
    v_array_access_index int;
  BEGIN
    -- find or create the static entity
    SELECT id INTO v_static_id -- try to find id of entity
    FROM job
    WHERE 1=1
      AND (uuid = in_uuid);
    IF (v_static_id IS NULL) THEN -- if entity could not be already found, create the static entity
      INSERT INTO job
        (uuid, created_at, title, status, description)
        VALUES
        (in_uuid, v_created_at, in_title, in_status, in_description)
        RETURNING id INTO v_static_id;
    END IF;

    -- insert new version to ensure that latest dynamic data is effective, if dynamic data has changed
    SELECT id INTO v_matching_version_id -- see if latest version already has this data
    FROM job_version
    WHERE 1=1
      AND job_id = v_static_id -- for this entity
      AND effective_at = ( -- and is the version effective at the time of "v_effective_at"
        SELECT MAX(effective_at)
        FROM job_version ssv
        WHERE ssv.job_id = v_static_id
          AND effective_at <= v_effective_at
      )
      AND (location_id = in_location_id)
      AND (photo_ids_hash = digest(array_to_string(in_photo_ids, ',', '__NULL__'), 'sha256'));
    IF (v_matching_version_id IS NULL) THEN -- if the latest version does not match, insert a new version
      INSERT INTO job_version
        (job_id, created_at, effective_at, location_id, photo_ids_hash)
        VALUES
        (v_static_id, v_created_at, v_effective_at, in_location_id, digest(array_to_string(in_photo_ids, ',', '__NULL__'), 'sha256'))
        RETURNING id INTO v_matching_version_id;

      -- insert a row into the mapping table for each value in array in_photo_ids
      FOR v_array_access_index IN 1 .. array_upper(in_photo_ids, 1)
      LOOP
        INSERT INTO job_version_to_photo
          (created_at, job_version_id, photo_id, array_order_index)
          VALUES
          (v_created_at, v_matching_version_id, in_photo_ids[v_array_access_index], v_array_access_index);
      END LOOP;
    END IF;

    -- update the current version pointer table, if it is not already up to date
    SELECT job_version_id INTO v_current_version_id_recorded_in_pointer_table  -- get the version recorded as current for the entity, if any
    FROM job_cvp
    WHERE 1=1
      AND job_id = v_static_id; -- for this entity
    IF (v_current_version_id_recorded_in_pointer_table IS null) THEN -- if its null, then just insert it, since it isn't already defined
      INSERT INTO job_cvp
        (updated_at, job_id, job_version_id)
        VALUES
        (v_created_at, v_static_id, v_matching_version_id);
      v_current_version_id_recorded_in_pointer_table := v_matching_version_id; -- and record that the current version recorded is now the real current version
    END IF;
    IF (v_current_version_id_recorded_in_pointer_table <> v_matching_version_id) THEN -- if they are not exactly equal, try to update the current version recorded in the pointer table
      SELECT effective_at INTO v_effective_at_of_current_version_recorded_in_pointer_table  -- grab the effective_at value of the recorded current version
      FROM job_version
      WHERE id = v_current_version_id_recorded_in_pointer_table;
      IF (v_effective_at_of_current_version_recorded_in_pointer_table < v_effective_at) THEN -- update cached current version only if the version we just inserted is "newer" than the currently cached version
        UPDATE job_cvp
        SET
          job_version_id = v_matching_version_id,
          updated_at = v_created_at
        WHERE
          job_id = v_static_id;
      END IF;
    END IF;

    -- return the static entity id
    RETURN v_static_id;
  END;
$$

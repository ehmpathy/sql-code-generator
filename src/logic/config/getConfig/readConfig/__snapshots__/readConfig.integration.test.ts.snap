// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`readConfig should be able to read a config without queries 1`] = `
{
  "declarations": [
    ResourceDeclaration {
      "path": "schema/functions/get_answer_to_life.sql",
      "sql": "CREATE OR REPLACE FUNCTION get_answer_to_life()
RETURNS int
LANGUAGE plpgsql
AS $$
  BEGIN
    RETURN 42;
  END;
$$
",
    },
    ResourceDeclaration {
      "path": "schema/tables/ice_cream.sql",
      "sql": "CREATE TABLE \`ice_cream\` (
  \`id\` bigint(20) NOT NULL AUTO_INCREMENT,
  \`uuid\` char(36) COLLATE utf8mb4_bin NOT NULL,
  \`created_at\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  \`name\` varchar(255) COLLATE utf8mb4_bin NOT NULL,
  \`ingredient_ids_hash\` binary(32) NOT NULL,
  PRIMARY KEY (\`id\`),
  UNIQUE KEY \`tag_ux1\` (\`name\`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin
",
    },
    ResourceDeclaration {
      "path": "schema/tables/ingredient.sql",
      "sql": "CREATE TABLE ingredient (
  id bigserial PRIMARY KEY,
  uuid uuid NOT NULL,
  created_at timestamptz NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  name varchar NOT NULL,
  cost numeric(5, 2) NOT NULL,
  CONSTRAINT ingredient_pk PRIMARY KEY (id),
  CONSTRAINT ingredient_ux1 UNIQUE (name)
)
",
    },
  ],
  "dialect": "10.7",
  "generates": {
    "queryFunctions": undefined,
    "types": "src/generated/fromSql/types.ts",
  },
  "language": "postgres",
  "rootDir": "__DIR__",
}
`;

exports[`readConfig should be able to read a fully declared config 1`] = `
{
  "declarations": [
    ResourceDeclaration {
      "path": "schema/functions/hash_string.sql",
      "sql": "CREATE FUNCTION \`get_from_delimiter_split_string\`(
  in_array varchar(255),
  in_delimiter char(1),
  in_index int
) RETURNS varchar(255) CHARSET utf8mb4 COLLATE utf8mb4_unicode_ci
BEGIN
  /*
    usage:
      SELECT get_from_delimiter_split_string('1,5,3,7,4', ',',  1); -- returns '5'
      SELECT get_from_delimiter_split_string('1,5,3,7,4', ',',  10); -- returns ''
  */
  return REPLACE( -- remove the delimiters after doing the following:
    SUBSTRING( -- pick the string
      SUBSTRING_INDEX(in_array, in_delimiter, in_index + 1), -- from the string up to index+1 counts of the delimiter
      LENGTH(
        SUBSTRING_INDEX(in_array, in_delimiter, in_index) -- keeping only everything after index counts of the delimiter
      ) + 1
    ),
    in_delimiter,
    ''
  );
END
",
    },
    ResourceDeclaration {
      "path": "schema/functions/upsert_image.sql",
      "sql": "CREATE FUNCTION \`upsert_image\`(
  in_url varchar(190),
  in_caption varchar(190),
  in_credit varchar(190),
  in_alt_text varchar(190)
) RETURNS bigint(20)
BEGIN
  -- declarations
  DECLARE v_static_id BIGINT;
  DECLARE v_created_at DATETIME(6) DEFAULT CURRENT_TIMESTAMP(6); -- define a common created_at timestamp to use

  -- find or create the static entity
  SET v_static_id = (
    SELECT id
    FROM image
    WHERE 1=1
      AND (url = BINARY in_url)
      AND (caption = BINARY in_caption OR (caption IS null AND in_caption IS null))
      AND (credit = BINARY in_credit OR (credit IS null AND in_credit IS null))
      AND (alt_text = BINARY in_alt_text OR (alt_text IS null AND in_alt_text IS null))
  );
  IF (v_static_id IS NULL) THEN -- if entity could not be found originally, create the static entity
    INSERT INTO image
      (uuid, created_at, url, caption, credit, alt_text)
      VALUES
      (uuid(), v_created_at, in_url, in_caption, in_credit, in_alt_text);
    SET v_static_id = (
      SELECT last_insert_id()
    );
  END IF;

  -- return the static entity id
  return v_static_id;
END
",
    },
    ResourceDeclaration {
      "path": "schema/tables/communication_channel.sql",
      "sql": "CREATE TABLE \`communication_channel\` (
  -- meta
  \`id\` BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  \`uuid\` VARCHAR(36) NOT NULL,
  \`created_at\` DATETIME DEFAULT CURRENT_TIMESTAMP,

  -- static data
  \`type\` ENUM('APP', 'SMS', 'EMAIL') NOT NULL, -- e.g., "how do we send this"
  \`address\` VARCHAR(36) NOT NULL, -- e.g., "where do we send this"

  -- meta meta
  UNIQUE (\`type\`, \`address\`) -- type + address uniquely identify a communication channel
) ENGINE = InnoDB;
",
    },
    ResourceDeclaration {
      "path": "schema/tables/ice_cream.sql",
      "sql": "CREATE TABLE \`ice_cream\` (
  \`id\` bigint(20) NOT NULL AUTO_INCREMENT,
  \`uuid\` char(36) COLLATE utf8mb4_bin NOT NULL,
  \`created_at\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  \`name\` varchar(255) COLLATE utf8mb4_bin NOT NULL,
  \`ingredient_ids_hash\` binary(32) NOT NULL,
  PRIMARY KEY (\`id\`),
  UNIQUE KEY \`tag_ux1\` (\`name\`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin
",
    },
    ResourceDeclaration {
      "path": "schema/tables/image.sql",
      "sql": "CREATE TABLE \`image\` (
  \`id\` bigint(20) NOT NULL AUTO_INCREMENT,
  \`uuid\` char(36) COLLATE utf8mb4_bin NOT NULL,
  \`created_at\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  \`url\` varchar(190) COLLATE utf8mb4_bin NOT NULL,
  \`caption\` varchar(190) COLLATE utf8mb4_bin DEFAULT NULL,
  \`credit\` varchar(190) COLLATE utf8mb4_bin, -- note: we strip "DEFAULT NULL" here for testing
  \`alt_text\` varchar(190) COLLATE utf8mb4_bin,
  PRIMARY KEY (\`id\`),
  UNIQUE KEY \`image_ux1\` (\`url\`,\`caption\`,\`credit\`,\`alt_text\`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin
",
    },
    ResourceDeclaration {
      "path": "schema/tables/ingredient.sql",
      "sql": "CREATE TABLE \`ingredient\` (
  \`id\` bigint(20) NOT NULL AUTO_INCREMENT,
  \`uuid\` char(36) COLLATE utf8mb4_bin NOT NULL,
  \`created_at\` datetime(6) NOT NULL DEFAULT CURRENT_TIMESTAMP(6),
  \`name\` varchar(255) COLLATE utf8mb4_bin NOT NULL,
  \`cost\` decimal(5,2) NOT NULL,
  PRIMARY KEY (\`id\`),
  UNIQUE KEY \`tag_ux1\` (\`name\`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_bin
",
    },
    ResourceDeclaration {
      "path": "schema/tables/user.sql",
      "sql": "CREATE TABLE \`user\` (
  -- meta
  \`id\` BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY,
  \`uuid\` VARCHAR(36) NOT NULL,
  \`created_at\` DATETIME DEFAULT CURRENT_TIMESTAMP,

  -- static data (in this example... in real life this should not be static)
  \`first_name\` VARCHAR(255) NOT NULL,
  \`last_name\` VARCHAR(255) NOT NULL,

  -- meta meta
  UNIQUE (\`first_name\`, \`last_name\`) -- (in this example... in real life, users should not actually be unique on their name)
) ENGINE = InnoDB;
",
    },
    ResourceDeclaration {
      "path": "schema/views/view_user_name.sql",
      "sql": "CREATE VIEW \`view_user_name\` AS
  SELECT
    u.id,
    u.first_name,
    u.last_name
  FROM user u;
",
    },
    QueryDeclaration {
      "path": "src/dao/iceCream/findAllNew.ts",
      "sql": "
-- query_name = find_all_new_ice_cream
SELECT
  s.id,
  s.uuid,
  s.name,
  (
    SELECT GROUP_CONCAT(ice_cream_to_ingredient.ingredient_id ORDER BY ice_cream_to_ingredient.ingredient_id)
    FROM ice_cream_to_ingredient WHERE ice_cream_to_ingredient.ice_cream_id = s.id
  ) as ingredient_ids,
  s.created_at
FROM ice_cream s
WHERE s.created_at > DATE_SUB(NOW(), INTERVAL 7 day) -- new if less than 7 days old
LIMIT :limit
;
",
    },
    QueryDeclaration {
      "path": "src/dao/iceCream/findById.ts",
      "sql": "
-- query_name = find_ice_cream_by_id
SELECT
  s.id,
  s.uuid,
  s.name,
  (
    SELECT GROUP_CONCAT(ice_cream_to_ingredient.ingredient_id ORDER BY ice_cream_to_ingredient.ingredient_id)
    FROM ice_cream_to_ingredient WHERE ice_cream_to_ingredient.ice_cream_id = s.id
  ) as ingredient_ids,
  s.created_at
FROM ice_cream s
;
",
    },
    QueryDeclaration {
      "path": "src/dao/user/findAllByName.ts",
      "sql": "
-- query_name = find_all_by_name
SELECT
  u.id,
  u.first_name
  -- concat(u.first_name, u.last_name) as full_name; TODO: support mysql native functions https://github.com/uladkasach/sql-code-generator/issues/3
FROM user u
WHERE u.first_name = :firstName
",
    },
    QueryDeclaration {
      "path": "src/others/queryUserNameView.ts",
      "sql": "
-- query_name = select_user_name_from_view
SELECT
  u.first_name,
  u.last_name
FROM view_user_name u
WHERE u.id = :userId
",
    },
  ],
  "dialect": "5.7",
  "generates": {
    "queryFunctions": "src/generated/fromSql/queryFunctions.ts",
    "types": "src/generated/fromSql/types.ts",
  },
  "language": "mysql",
  "rootDir": "__DIR__",
}
`;
